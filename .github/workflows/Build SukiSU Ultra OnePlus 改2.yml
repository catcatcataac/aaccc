name: 构建一加_SukiSU Ultra内核
on:
  workflow_dispatch:
    inputs:
      KERNEL_VERSION:
        type: choice
        description: "内核版本选择"
        required: true
        default: 6.6
        options:
          - 6.6
          - 6.1
          - 5.15
          - 5.10
      HOOK:
        type: choice
        description: "钩子选择"
        required: true
        default: manual
        options:
          - kprobe
          - manual
          - tracepoint
      SUSFS_CI:
        type: choice
        description: "SUSFS模块下载方式"
        required: true
        default: CI
        options:
          - CI
          - Release
          - NoN
      KSU_META:
        type: string
        description: "分支名(必填)/自定义版本标识(留空不修改)"
        required: false
        default: "susfs-main/Niggers"
      BUILD_TIME:
        type: string
        description: "自定义构建时间(输入F使用当前时间)"
        required: false
        default: "Sun Jun 15 14:56:02 UTC 2025"
      SUFFIX:
        type: string
        description: "自定义内核后缀(不输入则用随机字符串)"
        required: false
        default: ""
      FAST_BUILD:
        type: boolean
        description: "是否启用极速构建？"
        required: true
        default: true
      KPM:
        type: boolean
        description: "是否启用内核模块(KPM)？"
        required: true
        default: true
      SCHED:
        type: boolean
        description: "是否添加风驰驱动？"
        required: true
        default: false
      ZRAM:
        type: boolean
        description: "是否添加更多ZRAM算法？"
        required: true
        default: true

jobs:
  build:
    name: ${{ github.event.inputs.FAST_BUILD == 'true' && ' [极速]' || '' }}${{ github.event.inputs.SCHED == 'true' && ' [风驰]' || '' }}${{ github.event.inputs.ZRAM == 'true' && ' [ZRAM]' || '' }}${{ github.event.inputs.KPM == 'true' && ' [KPM]' || '' }}适用于内核 ${{ github.event.inputs.KERNEL_VERSION }} ${{ github.event.inputs.SUFFIX }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_MAXSIZE: 8G
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 最大化构建空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: 内核版本映射机型
        id: kernel_mapping
        run: |
          # 内核版本与机型的对应关系
          case "${{ github.event.inputs.KERNEL_VERSION }}" in
            "6.6")
              echo "FILE=oneplus_13t" >> $GITHUB_ENV
              echo "机型映射: 6.6 -> oneplus_13t"
              ;;
            "6.1")
              echo "FILE=oneplus12" >> $GITHUB_ENV
              echo "机型映射: 6.1 -> oneplus12"
              ;;
            "5.15")
              echo "FILE=oneplus_11" >> $GITHUB_ENV
              echo "机型映射: 5.15 -> oneplus_11"
              ;;
            "5.10")
              echo "FILE=oneplus_ace_pro" >> $GITHUB_ENV
              echo "机型映射: 5.10 -> oneplus_ace_pro"
              ;;
          esac

      - name: 自动提取信息
        id: extract_info
        run: |
          set -e
          cd "$GITHUB_WORKSPACE"
          # 机型与系统/内核版本的映射
          declare -A KVERSION_MAP=(
            ["oneplus_13t"]="android15 6.6"
            ["oneplus12"]="android14 6.1"
            ["oneplus_11"]="android13 5.15"
            ["oneplus_ace_pro"]="android12 5.10"
          )
          FILE="${{ env.FILE }}"
          # 处理机型配置名
          if [[ "$FILE" =~ ^(.+)_([a-zA-Z])$ ]]; then
            FILE_CONF="${BASH_REMATCH[1]}"
          else
            FILE_CONF="$FILE"
          fi
          # 格式化机型名（首字母大写）
          FILE_BASE=$(echo "$FILE_CONF" | sed -E 's/_([a-zA-Z0-9])/\U\1/g; s/^oneplus/OnePlus/')
          mkdir -p ".repo/manifests_fallback"
          XML_PATH=".repo/manifests_fallback/${FILE}.xml"
          README_PATH=".repo/manifests_fallback/README.md"
          echo "处理 FILE=$FILE, CONF=$FILE_CONF, BASE=$FILE_BASE"
          echo "FILE_CONF=$FILE_CONF" >> $GITHUB_ENV
          echo "FILE_BASE=$FILE_BASE" >> $GITHUB_ENV

          echo "🌐 拉取一加Manifest分支列表..."
          BRANCHES=$(curl -s https://api.github.com/repos/OnePlusOSS/kernel_manifest/branches | jq -r '.[].name')

          FOUND=""
          # 查找对应机型的XML配置
          for BRANCH in $BRANCHES; do
            XML_URL="https://raw.githubusercontent.com/OnePlusOSS/kernel_manifest/$BRANCH/${FILE}.xml"
            README_URL="https://raw.githubusercontent.com/OnePlusOSS/kernel_manifest/$BRANCH/README.md"
            if curl -sf --head "$XML_URL" > /dev/null; then
              echo "✅ XML: $BRANCH"
              curl -s -o "$XML_PATH" "$XML_URL"
              curl -s -o "$README_PATH" "$README_URL"
              FOUND="$BRANCH"
              break
            fi
          done

          if [[ -z "$FOUND" || ! -s "$XML_PATH" ]]; then
            echo "❌ 无法找到 ${FILE}.xml"
            exit 1
          fi
          echo "📥 下载完成，提取revision信息..."

          # 解析revision获取CPU和安卓版本
          REVISION=$(grep -oP '<project[^>]+revision="\K[^"]+' "$XML_PATH" | head -n1 || true)
          echo "解析FILE获取CPU和ANDROID_VERSION..."
          CPU=$(echo "$REVISION" | sed -E 's#^oneplus/([^_]+).*#\1#')
          ANDROID_VERSION=$(echo "$REVISION" | grep -oP '\d{1,2}\.\d{1,2}(\.\d{1,2})?')
          if [[ -n "$CPU" && -n "$ANDROID_VERSION" ]]; then
            echo "✅ CPU=$CPU, ANDROID_VERSION=$ANDROID_VERSION"
            echo "CPU=$CPU" >> $GITHUB_ENV
            echo "ANDROID_VERSION=$ANDROID_VERSION" >> $GITHUB_ENV
            # 提取安卓主版本号
            echo "ANDROID_SHORT_VERSION=${ANDROID_VERSION%%.*}" >> $GITHUB_ENV
          else
            echo "❌ 无法从revision中提取CPU或安卓版本"
            exit 1
          fi

          # 从映射表获取系统版本和内核版本
          echo "解析KVERSION_MAP获取版本信息..."
          if [[ -n "${KVERSION_MAP[$FILE_CONF]}" ]]; then
            read -r KANDROID_VERSION KERNEL_VERSION <<< "${KVERSION_MAP[$FILE_CONF]}"
            echo "✅ KVERSION_MAP[$FILE_CONF] = $KANDROID_VERSION $KERNEL_VERSION"
            echo "KANDROID_VERSION=$KANDROID_VERSION" >> $GITHUB_ENV
            echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          else
            echo "❌ KVERSION_MAP中无$FILE_CONF的版本信息"
          fi

          # 从README提取构建参数
          echo "解析README.md获取CPUD和BUILD_METHOD..."
          if [[ -s "$README_PATH" ]]; then
            BUILD_LINE=$(grep -m1 'oplus_build_kernel.sh' "$README_PATH" || true)
            if [[ -n "$BUILD_LINE" ]]; then
              CPUD=$(echo "$BUILD_LINE" | awk '{print $(NF-1)}')
              BUILD_METHOD=$(echo "$BUILD_LINE" | awk '{print $NF}')
              echo "✅ CPUD=$CPUD, BUILD_METHOD=$BUILD_METHOD"
              echo "CPUD=$CPUD" >> $GITHUB_ENV
              echo "BUILD_METHOD=$BUILD_METHOD" >> $GITHUB_ENV
            else
              echo "❌ README中未找到构建命令"
            fi
          else
            echo "❌ README下载失败或为空"
          fi
          # 输出组合信息
          echo "value=${FILE_BASE}_Android${ANDROID_VERSION}" >> "$GITHUB_OUTPUT"

      - name: 调试显示选中参数
        run: |
          echo "-----------------------"
          echo "选中的内核版本: ${{ github.event.inputs.KERNEL_VERSION }}"
          echo "映射的设备: ${{ env.FILE }}"
          echo "CPU: ${{ env.CPU }}"
          echo "CPUD: ${{ env.CPUD }}"
          echo "系统版本(KANDROID): ${{ env.KANDROID_VERSION }}"
          echo "安卓版本: ${{ env.ANDROID_VERSION }}"
          echo "内核版本: ${{ env.KERNEL_VERSION }}"
          echo "构建方式: ${{ env.BUILD_METHOD }}"
          echo "自定义KSU_META: ${{ github.event.inputs.KSU_META }}"
          echo "自定义构建时间: ${{ github.event.inputs.BUILD_TIME }}"
          echo -n "BUILD_TIME Unicode: "
          python3 -c "print(''.join(f'U+{ord(c):04X} ' for c in '''${{ github.event.inputs.BUILD_TIME }}'''))"
          echo "自定义后缀: ${{ github.event.inputs.SUFFIX }}"
          echo -n "SUFFIX Unicode: "
          python3 -c "print(''.join(f'U+{ord(c):04X} ' for c in '''${{ github.event.inputs.SUFFIX }}'''))"
          echo "SUSFS下载方式: ${{ github.event.inputs.SUSFS_CI }}"
          echo "钩子类型: ${{ github.event.inputs.HOOK }}"
          echo "KPM: ${{ github.event.inputs.KPM }}"
          echo "极速构建: ${{ github.event.inputs.FAST_BUILD }}"
          echo "风驰驱动: ${{ github.event.inputs.SCHED }}"
          echo "ZRAM算法: ${{ github.event.inputs.ZRAM }}"
          echo "-----------------------"

      - name: 检查磁盘空间
        run: df -h

      - name: 创建并启用3G交换分区
        run: |
          sudo swapoff -a
          sudo fallocate -l 3G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: 设置缓存环境
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${{ env.FILE }}" >> $GITHUB_ENV
          mkdir -p "$HOME/.ccache_${{ env.FILE }}"
          echo "设置缓存目录: $HOME/.ccache_${{ env.FILE }}"

      - name: 配置Git
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: 配置APT缓存
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: 设置APT缓存
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build SukiSU Ultra OnePlus.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: 安装依赖
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl ccache libelf-dev \
            build-essential flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip

      - name: 恢复ccache缓存
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref_name }}-${{ env.FILE }}-${{ env.BUILD_METHOD }}-${{ github.event.inputs.FAST_BUILD == 'true' && 'alpha' || 'beta' }}-15

      - name: 初始化ccache
        run: |
          INIT_FLAG="${{ env.CCACHE_DIR }}/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "初始化ccache (${{ env.CCACHE_DIR }})..."
              mkdir -p "${{ env.CCACHE_DIR }}"
              ccache -M ${{ env.CCACHE_MAXSIZE }}
              touch "$INIT_FLAG"
              echo "✅ ccache初始化完成"
            else
              echo "✅ ccache已初始化，跳过"
            fi
          else
            echo "❌ 未安装ccache，跳过"
          fi
          ccache -s

      - name: 安装Repo工具
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: 初始化Repo并同步代码
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          mkdir -p .repo/manifests
          FILE="${{ env.FILE }}"
          # 复制机型配置文件
          cp "$GITHUB_WORKSPACE/.repo/manifests_fallback/${FILE}.xml" ".repo/manifests/${FILE}.xml"
          # 初始化Repo仓库
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/${{env.CPU}} -m "${FILE}.xml" --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
          # 同步代码
          repo sync -c -j$(nproc) --no-clone-bundle --no-tags --force-sync
          # 移除GKI保护导出列表（避免编译错误）
          if [ -e kernel_platform/common/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [ -e kernel_platform/msm-kernel/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "无保护导出文件!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "无保护导出文件!"

      # 自定义内核后缀（若已设置）
      - name: 自定义内核后缀（非空时）
        if: ${{ github.event.inputs.SUFFIX != '' }}
        run: |
          cd kernel_workspace
          SUFFIX="${{ github.event.inputs.SUFFIX }}"
          KANDROID_VERSION="${{ env.KANDROID_VERSION }}"
          FAST_BUILD="${{ github.event.inputs.FAST_BUILD }}"

          # 修改版本生成脚本
          for path in \
            kernel_platform/common/scripts/setlocalversion \
            kernel_platform/msm-kernel/scripts/setlocalversion \
            kernel_platform/external/dtc/scripts/setlocalversion; do

            [ -f "$path" ] || continue

            echo "修改文件: $path"

            # 移除-dirty标记
            sed -i 's/ -dirty//g' "$path"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$path"

            # 根据脚本格式替换版本
            if grep -q 'KERNELVERSION.*scm_version' "$path"; then
              echo "检测到新版setlocalversion格式"
              sed -i "s|echo \"\${KERNELVERSION}.*scm_version}\"|echo \"\${KERNELVERSION}-${KANDROID_VERSION}-${SUFFIX}\"|" "$path"

            elif grep -q 'echo "\$res"' "$path"; then
              echo "检测到旧版setlocalversion格式"
              if [ "$FAST_BUILD" = "true" ]; then
                echo "启用极速构建: 使用静态版本"
                sed -i "s/^res=.*/res=\"-${KANDROID_VERSION}-${SUFFIX}\"/" "$path"
              else
                echo "标准构建: 插入后缀"
                if [[ -f ./kernel_platform/build_with_bazel.py ]]; then
                  echo "使用官方脚本编译时，特殊符号可能受限，失败请修改配置"
                fi
                tac "$path" | sed "0,/echo \"\\\$res\"/s//res=\\\$(echo \\\$res | cut -d- -f1-2)-${SUFFIX}; echo \"\\\$res\";/" | tac > "$path.tmp" && mv "$path.tmp" "$path"
              fi
            else
              echo "未知格式，手动追加版本"
              echo "echo \"\$res-${SUFFIX}\"" >> "$path"
            fi

            chmod +x "$path"
          done

          # 提交修改
          git add -A
          git commit -m "自定义后缀并移除-dirty"

      # 随机后缀（当未设置SUFFIX时）
      - name: 随机内核后缀（为空时）
        if: ${{ github.event.inputs.SUFFIX == '' }}
        run: |
          cd kernel_workspace
          KANDROID_VERSION="${{ env.KANDROID_VERSION }}"
          FAST_BUILD="${{ github.event.inputs.FAST_BUILD }}"

          # 生成随机后缀（伪官方格式）
          RANDOM_DIGIT=$(od -An -N1 -tu1 < /dev/urandom | tr -d '[:space:]' | awk '{print $1 % 11}')
          RANDOM_HASH=$(od -An -N7 -tx1 /dev/urandom | tr -d ' \n')
          RANDOM_SUFFIX="${RANDOM_DIGIT}-o-g${RANDOM_HASH}-BJX"

          # 修改版本生成脚本
          for path in \
            kernel_platform/common/scripts/setlocalversion \
            kernel_platform/msm-kernel/scripts/setlocalversion \
            kernel_platform/external/dtc/scripts/setlocalversion; do

            [ -f "$path" ] || continue

            echo "修改文件: $path"

            # 移除-dirty标记
            sed -i 's/ -dirty//g' "$path"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$path"

            # 根据脚本格式替换版本
            if grep -q 'KERNELVERSION.*scm_version' "$path"; then
              echo "检测到新版setlocalversion格式"
              sed -i "s|echo \"\${KERNELVERSION}.*scm_version}\"|echo \"\${KERNELVERSION}-${KANDROID_VERSION}-${RANDOM_SUFFIX}\"|" "$path"

            elif grep -q 'echo "\$res"' "$path"; then
              echo "检测到旧版setlocalversion格式"
              if [ "$FAST_BUILD" = "true" ]; then
                echo "启用极速构建: 使用带随机后缀的静态版本"
                sed -i "s/^res=.*/res=\"-${KANDROID_VERSION}-${RANDOM_SUFFIX}\"/" "$path"
              else
                echo "标准构建: 插入随机后缀"
                tac "$path" | sed "0,/echo \"\\\$res\"/s//res=\\\$(echo \\\$res | cut -d- -f1-2)-${RANDOM_SUFFIX}; echo \"\\\$res\";/" | tac > "$path.tmp" && mv "$path.tmp" "$path"
              fi
            else
              echo "未知格式，手动追加随机后缀"
              echo "echo \"\$res-${RANDOM_SUFFIX}\"" >> "$path"
            fi

            chmod +x "$path"
          done

          # 提交修改
          git add -A
          git commit -m "随机后缀并移除-dirty"

      - name: 集成SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform

          META="${{ github.event.inputs.KSU_META }}"
          BRANCH_NAME="${META%%/*}"
          CUSTOM_TAG="${META#*/}"
          echo "分支名: $BRANCH_NAME"
          echo "自定义版本标识: $CUSTOM_TAG"

          # 拉取SukiSU Ultra并初始化
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "$BRANCH_NAME"
          cd ./KernelSU

          # 获取KSU API版本
          KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
            grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')

          # 版本兼容处理（最低3.1.7）
          if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
            KSU_API_VERSION="3.1.7"
          fi

          echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV

          # 获取Git哈希
          GIT_HASH=$(git rev-parse --short HEAD)
          echo "GIT_HASH=$GIT_HASH"

          # 生成完整版本号
          if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
            VERSION_FULL="v$KSU_API_VERSION-$GIT_HASH@$BRANCH_NAME"
          else
            VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$GIT_HASH]"
          fi

          # 更新Makefile中的版本定义
          sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
          sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
          sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile

          VERSION_DEFINITIONS=$(cat <<EOF
            define get_ksu_version_full
            $VERSION_FULL
            endef

            KSU_VERSION_API := $KSU_API_VERSION
            KSU_VERSION_FULL := $VERSION_FULL
          EOF
          )

          # 插入版本定义到Makefile
          awk -v def="$VERSION_DEFINITIONS" '
            /REPO_OWNER :=/ {print; print def; inserted=1; next}
            1
            END {if (!inserted) print def}
          ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile

          # 计算KSU版本号
          KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

          # 显示版本信息
          echo "::group::最终Makefile版本信息预览"
          grep -A10 "REPO_OWNER" kernel/Makefile
          grep "KSU_VERSION_FULL" kernel/Makefile
          echo "::endgroup::"

      - name: 应用SukiSU Ultra补丁
        run: |
          cd kernel_workspace
          # 克隆补丁仓库
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform
          echo "拉取susfs补丁"
          # 复制susfs相关文件
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          # 若启用ZRAM，复制相关文件
          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
            echo "拉取zram补丁"
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux/
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib/
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto/
            cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          fi

          cd ./common
          GKI_V="${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}"
          # 获取内核子版本号
          SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')

          # 修复5.15旧版本C库兼容问题
          if [ "$GKI_V" == "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
            echo "修复5.15.0-5.15.123的旧版C库bug"
            curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
            patch -p1 < fix_5.15.legacy.patch
            echo "fix_5.15_patch完成"
          fi
          KERNEL_VERSION="${{ env.KERNEL_VERSION }}"
          file="${{ env.FILE }}"
          TRUSTY_EXISTS="false"
          # 处理6.6内核Trusty OS缺失问题
          if [[ "$KERNEL_VERSION" == "6.6" ]]; then
            if grep -q 'common-modules/trusty' "$GITHUB_WORKSPACE/.repo/manifests_fallback/${file}.xml"; then
              TRUSTY_EXISTS="true"
            fi
            echo "trusty_exists=$TRUSTY_EXISTS" >> $GITHUB_OUTPUT

            if [[ "$TRUSTY_EXISTS" == "false" && "$file" != "oneplus_pad_2_pro" && "$file" != "oneplus_pad_3" ]]; then
              echo "修复6.6内核部分机型缺失Trusty OS导致的susfs报错"
              sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${KERNEL_VERSION}.patch
              sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${KERNEL_VERSION}.patch
            fi
          fi
          # 应用susfs补丁
          echo "应用susfs补丁"
          patch -p1 < 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
          echo "susfs_patch完成"

      - name: 应用隐藏应用补丁
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "应用隐藏应用补丁"
          patch -p1 -F 3 < 69_hide_stuff.patch
          echo "隐藏应用_patch完成"

      # 转换OGKI为GKI（无需修改dtbo）
      - name: 转换HMBIRD_OGKI为HMBIRD_GKI
        if: ${{ env.KERNEL_VERSION == '6.6' }}
        run: |
          cd kernel_workspace/kernel_platform/common
          sed -i '1iobj-y += hmbird_patch.o' drivers/Makefile
          wget https://github.com/Numbersf/Action-Build/raw/SukiSU-Ultra/patches/hmbird_patch.patch
          echo "应用OGKI转GKI补丁"
          patch -p1 -F 3 < hmbird_patch.patch
          echo "OGKI转换GKI_patch完成"

      - name: 应用钩子配置
        run: |
          cd kernel_workspace/kernel_platform/common
          # 根据选择的钩子类型应用补丁
          if [ "${{ github.event.inputs.HOOK }}" = "kprobe" ]; then
          echo "使用kprobe钩子"
          elif [ "${{ github.event.inputs.HOOK }}" = "manual" ]; then
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          echo "使用manual钩子"
          patch -p1 -F 3 < syscall_hooks.patch
          elif [ "${{ github.event.inputs.HOOK }}" = "tracepoint" ]; then
          cp ../../SukiSU_patch/hooks/tracepoint_hooks.patch ./
          echo "使用tracepoint钩子"
          patch -p1 -F 3 < tracepoint_hooks.patch
          fi

      - name: 应用ZRAM补丁
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/common
          # 应用ZRAM相关补丁
          cp ../../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch ./
          echo "应用lz4kd补丁"
          patch -p1 -F 3 < lz4kd.patch || true
          echo 'lz4kd_patch完成'
          cp ../../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4k_oplus.patch ./
          echo "应用lz4k_oplus补丁"
          patch -p1 -F 3 < lz4k_oplus.patch || true
          echo 'lz4k_oplus_patch完成'

      - name: 升级LZ4版本
        run: |
          LZ4_VERSION="1.10.0"
          LZ4_DOWNLOAD_URL="https://github.com/lz4/lz4/archive/refs/tags/v${LZ4_VERSION}.tar.gz"
          cd kernel_workspace/kernel_platform/common
          mkdir -p lz4_temp && cd lz4_temp
          echo "下载LZ4 ${LZ4_VERSION}源码..."
          curl -Ls "${LZ4_DOWNLOAD_URL}" -o lz4.tar.gz
          tar -zxf lz4.tar.gz --strip-components=1

          # 复制并命名文件（避免与LZ4K冲突）
          echo "复制LZ4文件到内核目录..."
          cp lib/lz4.c ../lib/lz4v2_core.c
          cp lib/lz4.h ../lib/lz4v2_core.h
          cp lib/lz4hc.c ../lib/lz4v2_hc.c
          cp lib/lz4hc.h ../lib/lz4v2_hc.h
          # 头文件放到独立路径
          mkdir -p ../include/linux/lz4v2
          cp lib/lz4.h ../include/linux/lz4v2/lz4.h
          cp lib/lz4hc.h ../include/linux/lz4v2/lz4hc.h

          # 重命名函数和宏（隔离命名空间）
          echo "重命名符号避免冲突..."
          sed -i 's/LZ4_compress_default/lz4v2_compress_default/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h
          sed -i 's/LZ4_decompress_safe/lz4v2_decompress_safe/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h
          sed -i 's/LZ4_compress_HC/lz4v2_compress_HC/g' ../lib/lz4v2_hc.c ../lib/lz4v2_hc.h
          sed -i 's/LZ4_/LZ4V2_/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h ../lib/lz4v2_hc.c ../lib/lz4v2_hc.h
          
          # 添加内核兼容性代码
          echo "添加内核适配代码..."
          sed -i '1i#include <linux/types.h>' ../lib/lz4v2_core.c
          sed -i '2i#include <linux/kernel.h>' ../lib/lz4v2_core.c
          sed -i '3i#include <linux/module.h>' ../lib/lz4v2_core.c
          # HC文件同样处理
          sed -i '1i#include <linux/types.h>' ../lib/lz4v2_hc.c
          sed -i '2i#include <linux/kernel.h>' ../lib/lz4v2_hc.c
          sed -i '3i#include <linux/module.h>' ../lib/lz4v2_hc.c

          # 添加模块声明
          echo "添加模块元数据..."
          cat >> ../lib/lz4v2_core.c << 'EOF'
          MODULE_LICENSE("GPL");
          MODULE_DESCRIPTION("LZ4 1.10.0 Compression (v2)");
          MODULE_AUTHOR("LZ4 Project");
          EXPORT_SYMBOL(lz4v2_compress_default);
          EXPORT_SYMBOL(lz4v2_decompress_safe);
          EOF

          cat >> ../lib/lz4v2_hc.c << 'EOF'
          MODULE_LICENSE("GPL");
          MODULE_DESCRIPTION("LZ4HC 1.10.0 Compression (v2)");
          MODULE_AUTHOR("LZ4 Project");
          EXPORT_SYMBOL(lz4v2_compress_HC);
          EOF

          # 更新Makefile
          echo "更新Makefile配置..."
          if ! grep -q "lz4v2_core.o" ../lib/Makefile; then
            echo "obj-\$(CONFIG_LZ4V2_COMPRESS) += lz4v2_core.o" >> ../lib/Makefile
            echo "obj-\$(CONFIG_LZ4V2_COMPRESS) += lz4v2_hc.o" >> ../lib/Makefile
          fi

          # 清理临时文件
          cd .. && rm -rf lz4_temp
          echo "LZ4 ${LZ4_VERSION}集成完成（与LZ4K兼容）"

      # 配置内核选项
      - name: 添加配置项
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          KERNEL_VERSION="${{ env.KERNEL_VERSION }}"

          # SukiSU Ultra配置
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"

          # KPM配置
          if [ "${{ github.event.inputs.KPM }}" = "true" ]; then
            echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
          fi

          # 钩子配置
          if [ "${{ github.event.inputs.HOOK }}" = "kprobe" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
            echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_KPROBES_HOOK=y" >> "$CONFIG_FILE"
          elif [ "${{ github.event.inputs.HOOK }}" = "manual" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          elif [ "${{ github.event.inputs.HOOK }}" = "tracepoint" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> "$CONFIG_FILE" 
          fi

          # SUSFS配置
          echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"

          # TMPFS配置
          echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"

          # BBR配置
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"

          # ECN配置
          echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"

          # ZRAM配置
          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
            echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
          fi

          # LZ4 1.10.0配置
          echo "CONFIG_LZ4V2_COMPRESS=y" >> "$CONFIG_FILE"
          echo "CONFIG_LZ4V2_HC=y" >> "$CONFIG_FILE"
          echo "CONFIG_LZ4V2_DEBUG=n" >> "$CONFIG_FILE"
          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
            echo "CONFIG_ZRAM_LZ4V2=y" >> "$CONFIG_FILE"
          fi

          # 移除构建审查
          sed -i 's/check_defconfig//' ./common/build.config.gki

      # 添加风驰驱动（主要适用于sm8750）
      - name: 添加sched_ext（风驰驱动）
        if: ${{ github.event.inputs.SCHED == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/
          git clone https://github.com/HanKuCha/sched_ext.git
          cp -r ./sched_ext/* ./common/kernel/sched
          rm -rf ./sched_ext/.git
          cd common/kernel/sched

      # 自定义内核构建时间
      - name: 自定义构建时间
        shell: bash
        run: |
          INPUT_TIME="${{ github.event.inputs.BUILD_TIME }}"
          # 处理时间输入（F则用当前UTC时间）
          if [[ -n "$INPUT_TIME" && "$INPUT_TIME" != *[Ff]* ]]; then
            DATESTR="$INPUT_TIME"
            echo "使用输入的构建时间: $DATESTR"
          else
            DATESTR="$(TZ='UTC' date +'%a %b %d %T %Z %Y')"
            echo "使用UTC当前时间: $DATESTR"
          fi
          # 设置环境变量
          echo "KBUILD_BUILD_TIMESTAMP=${DATESTR}" >> "$GITHUB_ENV"
          echo "KBUILD_BUILD_VERSION=1" >> "$GITHUB_ENV"
          cd kernel_workspace/kernel_platform/
          # 修改编译时间脚本
          for f in common/scripts/mkcompile_h msm-kernel/scripts/mkcompile_h; do
            if [ -f "$f" ]; then
              echo "修改mkcompile_h，构建时间: $DATESTR"
              if grep -q 'UTS_VERSION=' "$f"; then
                perl -pi -e "s{UTS_VERSION=\"\\\$\\(.*?\\)\"}{UTS_VERSION=\"#1 SMP PREEMPT $DATESTR\"}" "$f"
              else
                perl -0777 -pi -e "s{cat <<EOF}{cat <<EOF\n#undef UTS_VERSION\n#define UTS_VERSION \"#1 SMP PREEMPT $DATESTR\" } unless /UTS_VERSION/" "$f"
              fi
            fi
          done

      - name: 启用thin LTO（极速构建）
        if: ${{ (env.KERNEL_VERSION == '5.10' || env.KERNEL_VERSION == '5.15') && github.event.inputs.FAST_BUILD == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform
          DEFCONFIG=./common/arch/arm64/configs/gki_defconfig
          echo "在$DEFCONFIG中启用ThinLTO"
          sed -i 's/^CONFIG_LTO=n/CONFIG_LTO=y/' "$DEFCONFIG"
          sed -i 's/^CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
          sed -i 's/^CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
          grep -q '^CONFIG_LTO_CLANG_THIN=y' "$DEFCONFIG" || echo 'CONFIG_LTO_CLANG_THIN=y' >> "$DEFCONFIG"

      - name: 极速构建内核
        if: ${{ github.event.inputs.FAST_BUILD == 'true' }}
        id: fast_build
        run: |
          KERNEL_VERSION="${{ env.KERNEL_VERSION }}"
          # 根据内核版本选择clang工具链
          if [[ "$KERNEL_VERSION" == "6.6" ]]; then
            CLANG_PATH="clang-r510928"
            CLANG_DIR="prebuilts"
          elif [[ "$KERNEL_VERSION" == "6.1" ]]; then
            CLANG_PATH="clang-r487747c"
            CLANG_DIR="prebuilts"
          elif [[ "$KERNEL_VERSION" == "5.15" ]]; then
            CLANG_PATH="clang-r450784e"
            CLANG_DIR="prebuilts"
          elif [[ "$KERNEL_VERSION" == "5.10" ]]; then
            CLANG_PATH="clang-r416183b"
            CLANG_DIR="prebuilts-master"
            USE_LLVM_IAS=true
          else
            echo "fallback=true" >> "$GITHUB_OUTPUT"
            echo "⚠️ 内核版本\"$KERNEL_VERSION\"无对应clang工具链，回退到官方脚本"
            exit 0
          fi
          # 设置环境变量
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/$CLANG_DIR/clang/host/linux-x86/$CLANG_PATH/bin:$PATH"
          export PATH="/usr/lib/ccache:$PATH"
          export CC="ccache clang"
          sudo apt install -y libelf-dev ccache
          cd kernel_workspace/kernel_platform/common
          # 强制修改子版本号
          sed -i 's/^SUBLEVEL[[:space:]]*=[[:space:]]*.*/SUBLEVEL = 91/' Makefile

          # 构建参数
          MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
            RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
            PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
            LD=ld.lld HOSTLD=ld.lld KCFLAGS+=-Wno-error"
          if [[ "$USE_LLVM_IAS" == "true" ]]; then
            MAKE_ARGS="LLVM_IAS=1 $MAKE_ARGS"
          fi
          # 编译内核
          make -j$(nproc --all) O=out $MAKE_ARGS gki_defconfig
          make -j$(nproc --all) O=out $MAKE_ARGS
          ccache -s

      - name: 回退构建内核（标准模式）
        if: ${{ github.event.inputs.FAST_BUILD == 'false' || steps.fast_build.outputs.fallback == 'true' }}
        run: |
          cd kernel_workspace
          # 强制修改子版本号
          sed -i 's/^SUBLEVEL[[:space:]]*=[[:space:]]*.*/SUBLEVEL = 91/' kernel_platform/common/Makefile

          # 使用官方脚本构建
          if [ -f ./kernel_platform/build_with_bazel.py ]; then
            ./kernel_platform/oplus/bazel/oplus_modules_variant.sh ${{ env.CPUD }} ${{ env.BUILD_METHOD }}
            ./kernel_platform/build_with_bazel.py --lto=thin -t ${{ env.CPUD }} ${{ env.BUILD_METHOD }}
          else
            LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 \
            ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ env.CPUD }} ${{ env.BUILD_METHOD }}
          fi

      - name: 制作AnyKernel3刷包
        run: |
          git clone https://github.com/Numbersf/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          mkdir -p kernel_workspace/kernel_platform/out/Final-Image-Find/
          dir1=""
          dir2=""
          # 查找内核镜像文件
          image_path=$(find "./kernel_workspace/kernel_platform/common/out/" -name "Image" | head -n 1)
          if [ -n "$image_path" ]; then
            dir1=$(dirname "$image_path")/
            echo "找到make编译的Image文件"
          else
            image_path=$(find "./kernel_workspace/kernel_platform/out/" -name "Image" | head -n 1)
            if [ -n "$image_path" ]; then
              dir2=$(dirname "$image_path")/
              echo "找到官方脚本编译的Image文件"
            else
              echo "未找到Image文件，构建失败" >&2
              exit 1
            fi
          fi
          # 复制镜像到AnyKernel3
          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            echo "最终Image路径: $image_path"
            cp "$image_path" ./AnyKernel3/Image
            cp "$image_path" kernel_workspace/kernel_platform/out/Final-Image-Find/Image
          fi
          # 处理sm8750的额外镜像（官方脚本构建时）
          if [ -n "$dir2" ] && [ "${{ env.CPU }}" = "sm8750" ] && [ "${{ github.event.inputs.FAST_BUILD }}" = "false" ]; then
            echo "sm8750官方构建需复制dtbo.img、system_dlkm.img，切换极速构建需还原这些分区"
            for file in dtbo.img system_dlkm.erofs.img; do
              if [ -f "$dir2$file" ]; then
                target_name="$file"
                if [ "$file" = "system_dlkm.erofs.img" ]; then
                  target_name="system_dlkm.img"
                fi
                cp "$dir2$file" "./AnyKernel3/$target_name"
              else
                echo "$file不存在，跳过"
              fi
            done
          fi

      - name: 应用patch_linux并替换Image（KPM）
        if: ${{ github.event.inputs.KPM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/out/Final-Image-Find
          curl -LO --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3/Image

      - name: 从CI下载最新SUSFS模块
        if: ${{ github.event.inputs.SUSFS_CI == 'CI' }}
        continue-on-error: true
        run: |
          # 获取最新成功构建的Run ID
          LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success" | \
            jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)
          if [ -z "$LATEST_RUN_ID" ]; then
            echo "未找到v1.5.2+分支的成功构建"
          else
            # 获取 artifact 下载链接
            ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[0].archive_download_url')
            if [ -n "$ARTIFACT_URL" ]; then
              curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o ksu_module_susfs_1.5.2+_CI.zip "$ARTIFACT_URL"
              cp ksu_module_susfs_1.5.2+_CI.zip ./AnyKernel3/
            else
              echo "获取artifact链接失败"
            fi
          fi

      - name: 从Release下载最新SUSFS模块
        if: ${{ github.event.inputs.SUSFS_CI == 'Release' }}
        continue-on-error: true
        run: |
          wget -O ksu_module_susfs_1.5.2+_Release.zip https://github.com/sidex15/ksu_module_susfs/releases/latest/download/ksu_module_susfs_1.5.2+.zip
          cp ksu_module_susfs_1.5.2+_Release.zip ./AnyKernel3/

      - name: 从CI下载最新SukiSU-Ultra APK
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 获取最新成功构建的Run ID
          run_id=$(gh api \
            "repos/SukiSU-Ultra/SukiSU-Ultra/actions/workflows/build-manager.yml/runs?branch=main&status=success&per_page=1" \
            --jq '.workflow_runs[0].id' || echo "")
          if [[ -z "$run_id" ]]; then
            echo "未找到成功的构建，跳过下载"
          else
            # 获取manager artifact链接
            artifact_url=$(gh api \
              "repos/SukiSU-Ultra/SukiSU-Ultra/actions/runs/$run_id/artifacts" | \
              jq -r '.artifacts[] | select(.name == "manager") | .archive_download_url' | head -n1)
            if [[ -z "$artifact_url" ]]; then
              echo "未找到'manager' artifact，跳过下载"
            else
              echo "下载地址: $artifact_url"
              curl -fL -H "Authorization: token $GITHUB_TOKEN" -o manager.zip "$artifact_url"
              unzip -j manager.zip "*.apk" -d ./AnyKernel3/
            fi
          fi

      - name: 设置压缩包后缀
        id: suffix
        run: |
          echo "value=${{ github.event.inputs.ZRAM == 'true' && '_LZ4KD' || '' }}${{ github.event.inputs.KPM == 'true' && '_KPM' || '' }}${{ github.event.inputs.HOOK == 'kprobe' && '_KP' || github.event.inputs.HOOK == 'manual' && '_VFS' || github.event.inputs.HOOK == 'tracepoint' && '_TP' || '' }}${{ github.event.inputs.SCHED== 'true' && '_SCHED' || '' }}" >> $GITHUB_OUTPUT

      - name: 上传AnyKernel3刷包
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSUUltra_${{ env.KSUVER }}_Kernel${{ github.event.inputs.KERNEL_VERSION }}${{ steps.suffix.outputs.value }}
          path: ./AnyKernel3/*

      - name: 下载并解压ZRAM模块
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        id: zram_find
        run: |
          set -e
          sudo apt install -y unzip
          echo "获取ZRAM模块下载链接..."
          retries=3
          success=0
          # 多次尝试下载
          for i in $(seq 1 $retries); do
            echo "第$i次尝试..."
            download_url=$(curl -s https://api.github.com/repos/FurLC/ZRAM-Module/releases/latest | \
              grep "browser_download_url" | grep "ZRAM-Module-.*\.zip" | cut -d '"' -f 4 | head -n 1)

            if [ -n "$download_url" ]; then
              echo "✅ 成功获取链接: $download_url"
              wget -N "$download_url" && success=1 && break
            else
              echo "⚠️ 获取链接失败，3秒后重试..."
              sleep 3
            fi
          done

          if [ "$success" -ne 1 ]; then
            echo "❌ $retries次尝试均失败"
            echo "upload=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 解压并替换zram.ko
          unzip "$(ls -t ZRAM-Module-*.zip | head -1)" -d ZRAM-Module
          target="./ZRAM-Module/zram/zram.ko"
          echo "查找zram.ko..."
          search_paths=(
            "./kernel_workspace/kernel_platform/out"
            "./kernel_workspace/device/qcom"
          )
          zram_path=""
          for path in "${search_paths[@]}"; do
            zram_path=$(find "$path" -type f -name "zram.ko" | head -n 1)
            [ -n "$zram_path" ] && break
          done
          if [ -z "$zram_path" ]; then
            zram_path=$(find "./kernel_workspace" -type f -name "zram.ko" | head -n 1)
          fi
          # 复制找到的模块
          if [ -n "$zram_path" ] && [ -f "$zram_path" ]; then
            echo "ZRAM模块路径: $zram_path"
            mkdir -p "$(dirname "$target")"
            if [ "$(realpath "$zram_path")" != "$(realpath "$target")" ]; then
              cp "$zram_path" "$target"
            else
              echo "源文件与目标路径相同，跳过"
            fi
          else
            echo "未找到zram.ko，可能不支持该内核版本"
            echo "upload=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

      - name: 上传ZRAM模块
        if: ${{ github.event.inputs.ZRAM == 'true' && steps.zram_find.outputs.upload != 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: ZRAM-Module_${{ env.KERNEL_VERSION }}_Kernel${{ github.event.inputs.KERNEL_VERSION }}
          path: ZRAM-Module/*

      - name: 构建后磁盘检查
        run: df -h
